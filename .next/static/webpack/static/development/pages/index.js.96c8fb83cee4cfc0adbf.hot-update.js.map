{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.96c8fb83cee4cfc0adbf.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Card, Button, Container, Divider, Label, List, Icon, Form } from 'semantic-ui-react';\nimport chatroom from '../ethereum/chatroom';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\n\nclass Index extends Component {\n  state= {\n    messageContent: ''\n  };\n\n  static async getInitialProps() {\n    const accounts = await web3.eth.getAccounts();\n    const chatLength = await chatroom.methods.getMessagesLength().call({\n      from: accounts[0]\n    });\n\n    var chatLog = [];\n    var authors = [];\n    var usernames = [];\n\n    for (let i = 0; i < chatLength; i++) {\n      let message = await chatroom.methods.getMessage(i).call({\n        from: accounts[0]\n      });\n\n      let author = await chatroom.methods.getAuthor(i).call({\n        from: accounts[0]\n      });\n\n      let username = await chatroom.methods.getUsername(author).call({\n        from: accounts[0]\n      });\n\n      chatLog.push(message);\n      authors.push(author);\n      usernames.push(username);\n    }\n\n    for (let i = 0; i < chatLength; i++) {\n      let author = await chatroom.methods.getAuthor(i).call({\n        from: accounts[0]\n      });\n\n      authors.push(author);\n    }\n    console.log(authors);\n    return { chatLog, authors, usernames }\n  }\n\n  onSend = async (event) => {\n    event.preventDefault();\n    const accounts = await web3.eth.getAccounts();\n\n    await chatroom.methods.sendMessage(this.state.messageContent).send({\n      from: accounts[0]\n    });\n  }\n\n  getAuthors(index) {\n    return this.props.authors[index];\n  }\n\n  getUsernames(index) {\n    return this.props.usernames[index];\n  }\n\n  renderChat() {\n    let message;\n    let author;\n    let username;\n    let items = []\n\n    for (var i = 0; i < this.props.chatLog.length; i++) {\n      message = this.props.chatLog[i];\n      author = this.getAuthors(i);\n      username = this.getUsernames(i);\n\n      if (username == \"\") {\n        items.push\n          (<List.Item>\n            <List.Content>\n              <List.Header as='a'>{author}</List.Header>\n              <List.Description>\n                {message} <Divider/>\n              </List.Description>\n            </List.Content>\n          </List.Item>)\n      } else {\n        items.push\n          (<List.Item>\n            <List.Content>\n              <List.Header as='a'>{username}</List.Header>\n              <List.Description>\n                {message} <Divider/>\n              </List.Description>\n            </List.Content>\n          </List.Item>)\n      }\n    }\n\n    return items;\n  }\n\n  render() {\n    return(\n      <div>\n        <h1>Chatroom Application</h1>\n        <Container>\n          <List>\n            {this.renderChat()}\n          </List>\n\n          <Form onSubmit={this.onSend}>\n            <Form.Input required\n              placeholder=\"Send a message\"\n              value={this.state.messageContent}\n              onChange={event => this.setState({ messageContent: event.target.value})}\n            />\n\n            <Button\n              content='Send'\n              icon='send'\n              primary\n            />\n\n            <Button\n              content='Change username'\n              icon='send'\n            />\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;;;;;;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAKA;AADA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAQA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;AA1HA;AACA;;AADA;;AACA;AACA;AADA;AACA;;AADA;AAIA;AACA;AACA;AAEA;AACA;;AADA;;;;;;AACA;AACA;AADA;AACA;;AADA;;AAIA;AACA;AADA;AACA;;AADA;;AAIA;AACA;AADA;AACA;;AADA;AAIA;AACA;AACA;AACA;;AAhBA;;;;;AAkBA;AACA;;AADA;;;;;;AACA;AACA;AADA;AACA;;AADA;AAIA;AACA;;AANA;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA1CA;AACA;AAkIA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}